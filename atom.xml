<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>半吊码工</title>
  
  <subtitle>知识应予记录, 经验应当传播</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.halfbaker.com/"/>
  <updated>2018-12-12T11:03:44.286Z</updated>
  <id>http://www.halfbaker.com/</id>
  
  <author>
    <name>半吊码工</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://www.halfbaker.com/2018/12/12/tech/crypt/Gemalto%E8%BD%AF%E7%A1%AC%E7%8B%97%E8%AE%BE%E7%BD%AE/"/>
    <id>http://www.halfbaker.com/2018/12/12/tech/crypt/Gemalto软硬狗设置/</id>
    <published>2018-12-12T10:14:14.692Z</published>
    <updated>2018-12-12T11:03:44.286Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Gemalto-Sentinel-LDK-设置"><a href="#Gemalto-Sentinel-LDK-设置" class="headerlink" title="Gemalto Sentinel LDK 设置"></a>Gemalto Sentinel LDK 设置</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>将<code>Installation Disk</code>中的文件安装到Windows系统中，一般也指EMS的安装</p><h2 id="硬Key制作与使用"><a href="#硬Key制作与使用" class="headerlink" title="硬Key制作与使用"></a>硬Key制作与使用</h2><ol><li>在EMS中添加Feature和Product(可以参照官方文档)，在配饰feature时注意feature的ID，该ID在加密文件时需要。</li><li>新建Entitlements，选择Product，插入黑色的Key进行烧制</li><li>使用<a href="http://localhost:1947查看生成的key" target="_blank" rel="noopener">http://localhost:1947查看生成的key</a></li><li>将安装Disk中Linux拷贝到需要运行Docker的宿主服务器中</li><li><p>安装Linux/Redistribute/Runtime/aksusbd_7.80-1_amd64.deb，并开放1947端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg -i aksusbd_7.80-1_amd64.deb</span><br></pre></td></tr></table></figure></li><li><p>使用Linux/VectorTools/Envelope/linuxenv 对so文件进行加密， DEMOMA.hvc是工具授权文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./linuxenv -d  -v:DEMOMA.hvc -f:5001 util.so util_p.so</span><br></pre></td></tr></table></figure></li><li><p>在Docker镜像中安装aksusbd驱动，并使用privileged模式启动镜像。</p></li></ol><h2 id="软Key制作与使用"><a href="#软Key制作与使用" class="headerlink" title="软Key制作与使用"></a>软Key制作与使用</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Gemalto-Sentinel-LDK-设置&quot;&gt;&lt;a href=&quot;#Gemalto-Sentinel-LDK-设置&quot; class=&quot;headerlink&quot; title=&quot;Gemalto Sentinel LDK 设置&quot;&gt;&lt;/a&gt;Gemalto Sentinel 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://www.halfbaker.com/2018/10/25/tech/jenkins/%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"/>
    <id>http://www.halfbaker.com/2018/10/25/tech/jenkins/安装记录/</id>
    <published>2018-10-25T03:54:11.126Z</published>
    <updated>2018-10-31T04:06:08.620Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>构建用户组和用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>sudo groupadd build</span><br><span class="line"><span class="meta">#</span>sudo useradd -d /jenkins -p l1admin --groups build jenkins</span><br></pre></td></tr></table></figure></li><li></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;构建用户组和用户&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CodeReview使用向导</title>
    <link href="http://www.halfbaker.com/2018/08/02/guider/devops/CodeReview%E4%BD%BF%E7%94%A8%E5%90%91%E5%AF%BC/"/>
    <id>http://www.halfbaker.com/2018/08/02/guider/devops/CodeReview使用向导/</id>
    <published>2018-08-02T02:10:13.000Z</published>
    <updated>2018-08-08T02:28:53.105Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>代码审核（<code>Code Review</code>）是软件研发质量保障机制中非常重要的一环，能够有效提高代码质量。目前团队使用的工具是基于<code>gerrit</code>搭建，结合<code>git-review</code>工具提交代码审查申请。</p></blockquote><h2 id="环境软件要求"><a href="#环境软件要求" class="headerlink" title="环境软件要求"></a>环境软件要求</h2><ul><li>git</li><li>python</li></ul><h2 id="账号创建与配置"><a href="#账号创建与配置" class="headerlink" title="账号创建与配置"></a>账号创建与配置</h2><p>目前<code>gerrit</code>系统没有与公司账号系统打通，因此在使用系统需要账号的设置工作。设置工作包括账号申请和账号设置两个步骤。</p><h3 id="账号申请"><a href="#账号申请" class="headerlink" title="账号申请"></a>账号申请</h3><p>将ITCode发送给<code>Gerrit</code>系统管理员<a href="mailto:`zhangxm34@lenovo.com" target="_blank" rel="noopener">`zhangxm34@lenovo.com</a><code>，邮件题目标明&quot;</code>Gerrit`账号申请”。通过申请后管理员会将密码通过邮箱发送给申请者。</p><h3 id="设置账号"><a href="#设置账号" class="headerlink" title="设置账号"></a>设置账号</h3><p>账号设置需要如下五个步骤：</p><p>1.登入<code>Gerrit</code>系统 <a href="http://10.100.208.50" target="_blank" rel="noopener">http://10.100.208.50</a><br>2.进入系统后点击右上角用户名，选择下拉框的<code>Settings</code>选项<br>3.使用<code>ssh-keygen</code>命令生成个人的<code>SSH Key</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 在windows中使用右键`Git Bash Here`打开</span><br><span class="line"><span class="meta">$</span> ssh-keygen -t rsa -C &lt;itcode&gt;@lenovo.com -f ~/.ssh/id_gerrit</span><br><span class="line"><span class="meta">#</span> 复制公共Key</span><br><span class="line"><span class="meta">$</span> cat ~/.ssh/id_gerrit.pub</span><br></pre></td></tr></table></figure></p><p>4.在左边栏<code>Settings</code>菜单中选择<code>SSH Public Keys</code>，然后将3步复制的<code>Key</code>添加的系统中。<br>5.验证系统是否连接成功<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ssh -p 29418 -i ~/.ssh/id_gerrit 10.100.208.50 -l &lt;your itcode&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 如果连接成功则会出现如下提示</span><br><span class="line">****    Welcome to Gerrit Code Review    ****</span><br><span class="line"></span><br><span class="line"> Hi &lt;your itcode&gt;, you have successfully connected over SSH.</span><br><span class="line"></span><br><span class="line"> Unfortunately, interactive shells are disabled.</span><br><span class="line"> To clone a hosted Git repository, use:</span><br><span class="line"></span><br><span class="line"> git clone ssh://zhangxm34@10.100.208.50:29418/REPOSITORY_NAME.git</span><br><span class="line"></span><br><span class="line">Connection to 10.100.208.50 closed.</span><br></pre></td></tr></table></figure></p><h2 id="工具设置"><a href="#工具设置" class="headerlink" title="工具设置"></a>工具设置</h2><p><code>Gerrit</code>系统支持原生的<code>git</code>命令，但命令比较复杂，因此需要<code>git-review</code>辅助开发人员进行相关操作。如果不想安装可以自行查看<code>Gerrit</code>的相关文档。</p><h3 id="git-review下载安装"><a href="#git-review下载安装" class="headerlink" title="git-review下载安装"></a><code>git-review</code>下载安装</h3><p><code>git-review</code>下载安装比较方便，在<code>python</code>环境下直接使用<code>pip</code>下载安装。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> pip install git-review</span><br></pre></td></tr></table></figure></p><h3 id="参数设置"><a href="#参数设置" class="headerlink" title="参数设置"></a>参数设置</h3><h4 id="git参数"><a href="#git参数" class="headerlink" title="git参数"></a><code>git</code>参数</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git config --global user.name &lt;your itcode&gt;</span><br><span class="line"><span class="meta">$</span> git config --global user.email &lt;your itcode&gt;@lenovo.com</span><br></pre></td></tr></table></figure><h4 id="ssh配置文件"><a href="#ssh配置文件" class="headerlink" title="ssh配置文件"></a><code>ssh</code>配置文件</h4><p>在<code>home</code>目录（windows：c/Users/&lt; your computer account name&gt;/）下<code>.ssh</code>文件夹中添加<code>config</code>文件，配置内容如下<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> gitlab for Lenovo</span><br><span class="line">Host gitlab.lenovo.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br><span class="line">User zhangxm34</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> gitlab for ci test</span><br><span class="line"><span class="meta">#</span> 克隆源代码</span><br><span class="line">Host 10.100.208.50</span><br><span class="line">Port 2222</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br><span class="line">User zhangxm34</span><br></pre></td></tr></table></figure></p><h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><h3 id="下载源代码"><a href="#下载源代码" class="headerlink" title="下载源代码"></a>下载源代码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git clone git@10.100.208.50:zhangxm/CapLogger.git</span><br><span class="line">Cloning into 'CapLogger'...</span><br><span class="line">remote: Counting objects: 25, done.</span><br><span class="line">remote: Compressing objects: 100% (18/18), done.</span><br><span class="line">remote: Total 25 (delta 0), reused 0 (delta 0)</span><br><span class="line">Receiving objects: 100% (25/25), 7.07 KiB | 1.18 MiB/s, done.</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> cd CapLogger</span><br></pre></td></tr></table></figure><h3 id="初始化git-review"><a href="#初始化git-review" class="headerlink" title="初始化git-review"></a>初始化<code>git-review</code></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git review -s</span><br><span class="line">Creating a git remote called 'gerrit' that maps to:</span><br><span class="line">        ssh://zhangxm34@10.100.208.50:29418/CapLogger</span><br></pre></td></tr></table></figure><h3 id="修改代码并提交"><a href="#修改代码并提交" class="headerlink" title="修改代码并提交"></a>修改代码并提交</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> echo "hello world from zhangxm34" &gt;&gt; README.md</span><br><span class="line"><span class="meta">$</span> git add .</span><br><span class="line"><span class="meta">$</span> git commit -m 'zhangxm34 review test'</span><br><span class="line"><span class="meta">$</span> git review</span><br></pre></td></tr></table></figure><p>经过上述步骤，提交者会收到一份邮件，表明<code>Review</code>请求已经提交成功，可以登入<code>Gerrit</code>系统进行查看。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;代码审核（&lt;code&gt;Code Review&lt;/code&gt;）是软件研发质量保障机制中非常重要的一环，能够有效提高代码质量。目前团队使用的工具是基于&lt;code&gt;gerrit&lt;/code&gt;搭建，结合&lt;code&gt;git-review&lt;/code&gt;工具提交
      
    
    </summary>
    
      <category term="教程系列" scheme="http://www.halfbaker.com/categories/guider/"/>
    
      <category term="Devops" scheme="http://www.halfbaker.com/categories/guider/Devops/"/>
    
    
      <category term="gerrit" scheme="http://www.halfbaker.com/tags/gerrit/"/>
    
  </entry>
  
  <entry>
    <title>Git命令大全</title>
    <link href="http://www.halfbaker.com/2018/08/01/tips/Git%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
    <id>http://www.halfbaker.com/2018/08/01/tips/Git命令大全/</id>
    <published>2018-08-01T03:39:08.000Z</published>
    <updated>2018-08-01T03:57:43.091Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Git是开发过程中经常用到的工具，本文主要将日常中常用的<code>git</code>命令进行梳理和记录。</p></blockquote><h2 id="Git主流程图"><a href="#Git主流程图" class="headerlink" title="Git主流程图"></a><code>Git</code>主流程图</h2><p>在开始罗列命令前，先给一张经常看到的图，这图正式所谓的“大道至简”，虽然简单，但也不简单。</p><p><img src="/2018/08/01/tips/Git命令大全/git_flow_arch.png" alt="git_flow_arch"></p><h2 id="Git命令归类"><a href="#Git命令归类" class="headerlink" title="Git命令归类"></a><code>Git</code>命令归类</h2><h3 id="查看、添加、提交、删除、找回，重置修改文件"><a href="#查看、添加、提交、删除、找回，重置修改文件" class="headerlink" title="查看、添加、提交、删除、找回，重置修改文件"></a>查看、添加、提交、删除、找回，重置修改文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">git help &lt;command&gt; # 显示command的help</span><br><span class="line">git show # 显示某次提交的内容 git show $id</span><br><span class="line">git co -- &lt;file&gt; # 抛弃工作区修改</span><br><span class="line">git co . # 抛弃工作区修改</span><br><span class="line"></span><br><span class="line">git add &lt;file&gt; # 将工作文件修改提交到本地暂存区</span><br><span class="line">git add . # 将所有修改过的工作文件提交暂存区</span><br><span class="line"></span><br><span class="line">git rm &lt;file&gt; # 从版本库中删除文件</span><br><span class="line">git rm &lt;file&gt; --cached # 从版本库中删除文件，但不删除文件</span><br><span class="line"></span><br><span class="line">git reset &lt;file&gt; # 从暂存区恢复到工作文件</span><br><span class="line">git reset -- . # 从暂存区恢复到工作文件</span><br><span class="line">git reset --hard # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改</span><br><span class="line"></span><br><span class="line">git ci &lt;file&gt;</span><br><span class="line">git ci .</span><br><span class="line">git ci -a # 将git add, git rm和git ci等操作都合并在一起做　　　　</span><br><span class="line">git ci -am "some comments"</span><br><span class="line">git ci --amend # 修改最后一次提交记录</span><br><span class="line"></span><br><span class="line">git revert &lt;$id&gt; # 恢复某次提交的状态，恢复动作本身也创建次提交对象</span><br><span class="line">git revert HEAD # 恢复最后一次提交的状态</span><br></pre></td></tr></table></figure><h3 id="查看文件diff"><a href="#查看文件diff" class="headerlink" title="查看文件diff"></a>查看文件diff</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git diff &lt;file&gt; # 比较当前文件和暂存区文件差异 git diff</span><br><span class="line">git diff &lt;id1&gt;&lt;id2&gt; # 比较两次提交之间的差异</span><br><span class="line">git diff &lt;branch1&gt;..&lt;branch2&gt; # 在两个分支之间比较</span><br><span class="line">git diff --staged # 比较暂存区和版本库差异</span><br><span class="line">git diff --cached # 比较暂存区和版本库差异</span><br><span class="line">git diff --stat # 仅仅比较统计信息</span><br></pre></td></tr></table></figure><h3 id="查看提交记录"><a href="#查看提交记录" class="headerlink" title="查看提交记录"></a>查看提交记录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git log git log &lt;file&gt; # 查看该文件每次提交记录</span><br><span class="line">git log -p &lt;file&gt; # 查看每次详细修改内容的diff</span><br><span class="line">git log -p -2 # 查看最近两次详细修改内容的diff</span><br><span class="line">git log --stat #查看提交统计信息</span><br></pre></td></tr></table></figure><h3 id="Git-本地分支管理"><a href="#Git-本地分支管理" class="headerlink" title="Git 本地分支管理"></a><code>Git</code> 本地分支管理</h3><h4 id="查看、切换、创建和删除分支"><a href="#查看、切换、创建和删除分支" class="headerlink" title="查看、切换、创建和删除分支"></a>查看、切换、创建和删除分支</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">git br -r # 查看远程分支</span><br><span class="line">git br &lt;new_branch&gt; # 创建新的分支</span><br><span class="line">git br -v # 查看各个分支最后提交信息</span><br><span class="line">git br --merged # 查看已经被合并到当前分支的分支</span><br><span class="line">git br --no-merged # 查看尚未被合并到当前分支的分支</span><br><span class="line"></span><br><span class="line">git co &lt;branch&gt; # 切换到某个分支</span><br><span class="line">git co -b &lt;new_branch&gt; # 创建新的分支，并且切换过去</span><br><span class="line">git co -b &lt;new_branch&gt; &lt;branch&gt; # 基于branch创建新的new_branch</span><br><span class="line">git co $id # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除</span><br><span class="line">git co $id -b &lt;new_branch&gt; # 把某次历史提交记录checkout出来，创建成一个分支</span><br><span class="line"></span><br><span class="line">git br -d &lt;branch&gt; # 删除某个分支</span><br><span class="line">git br -D &lt;branch&gt; # 强制删除某个分支 (未被合并的分支被删除的时候需要强制)</span><br></pre></td></tr></table></figure><h5 id="分支合并和rebase"><a href="#分支合并和rebase" class="headerlink" title="分支合并和rebase"></a>分支合并和rebase</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git merge &lt;branch&gt; # 将branch分支合并到当前分支</span><br><span class="line">git merge origin/master --no-ff # 不要Fast-Foward合并，这样可以生成merge提交</span><br><span class="line"></span><br><span class="line">git rebase master &lt;branch&gt; # 将master rebase到branch，相当于：</span><br><span class="line">git co &lt;branch&gt; &amp;&amp; git rebase master &amp;&amp; git co master &amp;&amp; git merge &lt;branch&gt;</span><br></pre></td></tr></table></figure><h3 id="Git补丁管理-方便在多台机器上开发同步时用"><a href="#Git补丁管理-方便在多台机器上开发同步时用" class="headerlink" title="Git补丁管理(方便在多台机器上开发同步时用)"></a><code>Git</code>补丁管理(方便在多台机器上开发同步时用)</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git diff &gt; ../sync.patch # 生成补丁</span><br><span class="line">git apply ../sync.patch # 打补丁</span><br><span class="line">git apply --check ../sync.patch #测试补丁能否成功</span><br></pre></td></tr></table></figure><h3 id="Git暂存管理"><a href="#Git暂存管理" class="headerlink" title="Git暂存管理"></a>Git暂存管理</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git stash # 暂存</span><br><span class="line">git stash list # 列所有stash</span><br><span class="line">git stash apply # 恢复暂存的内容</span><br><span class="line">git stash drop # 删除暂存区</span><br></pre></td></tr></table></figure><h3 id="Git远程分支管理"><a href="#Git远程分支管理" class="headerlink" title="Git远程分支管理"></a>Git远程分支管理</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">git pull # 抓取远程仓库所有分支更新并合并到本地</span><br><span class="line">git pull --no-ff # 抓取远程仓库所有分支更新并合并到本地，不要快进合并</span><br><span class="line"></span><br><span class="line">git fetch origin # 抓取远程仓库更新</span><br><span class="line"></span><br><span class="line">git merge origin/master # 将远程主分支合并到本地当前分支</span><br><span class="line"></span><br><span class="line">git co --track origin/branch # 跟踪某个远程分支创建相应的本地分支</span><br><span class="line">git co -b &lt;local_branch&gt; origin/&lt;remote_branch&gt; # 基于远程分支创建本地分支，功能同上</span><br><span class="line"></span><br><span class="line">git push # push所有分支</span><br><span class="line">git push origin master # 将本地主分支推到远程主分支</span><br><span class="line">git push -u origin master # 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)</span><br><span class="line">git push origin &lt;local_branch&gt; # 创建远程分支， origin是远程仓库名</span><br><span class="line">git push origin &lt;local_branch&gt;:&lt;remote_branch&gt; # 创建远程分支</span><br><span class="line">git push origin :&lt;remote_branch&gt; #先删除本地分支(git br -d &lt;branch&gt;)，然后再push删除远程分支</span><br></pre></td></tr></table></figure><h3 id="Git远程仓库管理"><a href="#Git远程仓库管理" class="headerlink" title="Git远程仓库管理"></a>Git远程仓库管理</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git remote -v # 查看远程服务器地址和仓库名称</span><br><span class="line">git remote show origin # 查看远程服务器仓库状态</span><br><span class="line">git remote add origin git@ github:robbin/robbin_site.git # 添加远程仓库地址</span><br><span class="line">git remote set-url origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址(用于修改远程仓库地址)</span><br><span class="line">git remote rm &lt;repository&gt; # 删除远程仓库</span><br></pre></td></tr></table></figure><h3 id="创建远程仓库"><a href="#创建远程仓库" class="headerlink" title="创建远程仓库"></a>创建远程仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git clone --bare robbin_site robbin_site.git # 用带版本的项目创建纯版本仓库</span><br><span class="line">scp -r my_project.git git@ git.csdn.net:~ # 将纯仓库上传到服务器上</span><br><span class="line">mkdir robbin_site.git &amp;&amp; cd robbin_site.git &amp;&amp; git --bare init # 在服务器创建纯仓库</span><br><span class="line">git remote add origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址</span><br><span class="line">git push -u origin master # 客户端首次提交</span><br><span class="line">git push -u origin develop # 首次将本地develop分支提交到远程develop分支，并且track</span><br><span class="line">git remote set-head origin master # 设置远程仓库的HEAD指向master分支</span><br></pre></td></tr></table></figure><h3 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>也可以命令设置跟踪远程库和本地库</span><br><span class="line">git branch --set-upstream master origin/master</span><br><span class="line">git branch --set-upstream develop origin/develop</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Git是开发过程中经常用到的工具，本文主要将日常中常用的&lt;code&gt;git&lt;/code&gt;命令进行梳理和记录。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Git主流程图&quot;&gt;&lt;a href=&quot;#Git主流程图&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="小窍门" scheme="http://www.halfbaker.com/categories/tips/"/>
    
    
      <category term="git" scheme="http://www.halfbaker.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Shell使用小记</title>
    <link href="http://www.halfbaker.com/2018/07/31/tips/Shell%E4%BD%BF%E7%94%A8%E5%B0%8F%E8%AE%B0/"/>
    <id>http://www.halfbaker.com/2018/07/31/tips/Shell使用小记/</id>
    <published>2018-07-31T01:04:18.000Z</published>
    <updated>2018-07-31T01:07:41.233Z</updated>
    
    <content type="html"><![CDATA[<h2 id="结合expect工具实现命令自动输入"><a href="#结合expect工具实现命令自动输入" class="headerlink" title="结合expect工具实现命令自动输入"></a>结合<code>expect</code>工具实现命令自动输入</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">NUM=$#</span><br><span class="line">if [ $NUM != 3 ]; then</span><br><span class="line">    echo "Add gerrit user and password:"</span><br><span class="line">    echo "    Usage: add_gerrit_user UserName Password Email"</span><br><span class="line">    exit 1;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">NAME=$1</span><br><span class="line"></span><br><span class="line">if [ $NUM -eq 2 ];then</span><br><span class="line">    PWD=$2</span><br><span class="line">else</span><br><span class="line">    PWD=l1admin</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">expect &lt;&lt; __EOF</span><br><span class="line"></span><br><span class="line">spawn htpasswd /etc/nginx/conf.d/gerrit.passwd $NAME</span><br><span class="line"></span><br><span class="line">expect &#123;</span><br><span class="line">    "New password" &#123; send "$PWD\r"; exp_continue &#125;</span><br><span class="line">    "Re-type new password" &#123; send "$PWD\r"; exp_continue &#125;</span><br><span class="line">&#125;</span><br><span class="line">__EOF</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;结合expect工具实现命令自动输入&quot;&gt;&lt;a href=&quot;#结合expect工具实现命令自动输入&quot; class=&quot;headerlink&quot; title=&quot;结合expect工具实现命令自动输入&quot;&gt;&lt;/a&gt;结合&lt;code&gt;expect&lt;/code&gt;工具实现命令自动输入&lt;
      
    
    </summary>
    
      <category term="小窍门" scheme="http://www.halfbaker.com/categories/tips/"/>
    
    
      <category term="shell" scheme="http://www.halfbaker.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>开发客户代码环境工具与配置</title>
    <link href="http://www.halfbaker.com/2018/07/30/guider/devops/%E5%BC%80%E5%8F%91%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE/"/>
    <id>http://www.halfbaker.com/2018/07/30/guider/devops/开发客户端配置/</id>
    <published>2018-07-30T06:08:19.000Z</published>
    <updated>2018-08-03T01:17:07.902Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>导言：针对不同的语言，每一位开发人员都有各自熟悉的开发工具，本教程主要描述怎样搭建<code>CAP</code>的代码开发环境，包括工具选择和开发环境设置两个部分，并支持<code>Windows</code>和<code>Linux</code>两大操作系统。其中涉及到的<code>Java</code>与<code>Pthon</code>语言开发工具和开发环境不做描述。</p></blockquote><h2 id="工具选择"><a href="#工具选择" class="headerlink" title="工具选择"></a>工具选择</h2><ol><li>git (git for windows)</li><li>git-review</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;导言：针对不同的语言，每一位开发人员都有各自熟悉的开发工具，本教程主要描述怎样搭建&lt;code&gt;CAP&lt;/code&gt;的代码开发环境，包括工具选择和开发环境设置两个部分，并支持&lt;code&gt;Windows&lt;/code&gt;和&lt;code&gt;Linux&lt;/code
      
    
    </summary>
    
      <category term="教程系列" scheme="http://www.halfbaker.com/categories/guider/"/>
    
      <category term="Devops" scheme="http://www.halfbaker.com/categories/guider/Devops/"/>
    
    
      <category term="git" scheme="http://www.halfbaker.com/tags/git/"/>
    
      <category term="git-review" scheme="http://www.halfbaker.com/tags/git-review/"/>
    
  </entry>
  
  <entry>
    <title>Mysql[MariaDB]使用小记</title>
    <link href="http://www.halfbaker.com/2018/07/23/tips/Mysql-MariaDB-%E4%BD%BF%E7%94%A8%E5%B0%8F%E8%AE%B0/"/>
    <id>http://www.halfbaker.com/2018/07/23/tips/Mysql-MariaDB-使用小记/</id>
    <published>2018-07-23T03:27:38.000Z</published>
    <updated>2018-07-23T03:29:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="启用远程Root访问权限"><a href="#启用远程Root访问权限" class="headerlink" title="启用远程Root访问权限"></a>启用远程Root访问权限</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [(none)]&gt; grant all privileges on *.* to 'root'@'%' identified by \</span><br><span class="line">'l1admin' with grant option;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;启用远程Root访问权限&quot;&gt;&lt;a href=&quot;#启用远程Root访问权限&quot; class=&quot;headerlink&quot; title=&quot;启用远程Root访问权限&quot;&gt;&lt;/a&gt;启用远程Root访问权限&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="小窍门" scheme="http://www.halfbaker.com/categories/tips/"/>
    
    
      <category term="Mysql" scheme="http://www.halfbaker.com/tags/Mysql/"/>
    
      <category term="MariaDB" scheme="http://www.halfbaker.com/tags/MariaDB/"/>
    
  </entry>
  
  <entry>
    <title>Maven使用小记</title>
    <link href="http://www.halfbaker.com/2018/07/20/tips/Maven%E4%BD%BF%E7%94%A8%E5%B0%8F%E8%AE%B0/"/>
    <id>http://www.halfbaker.com/2018/07/20/tips/Maven使用小记/</id>
    <published>2018-07-20T07:20:44.000Z</published>
    <updated>2018-07-20T07:23:40.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>如果到现在你都不会<code>Maven</code>，那请别说自己时<code>Java</code>开发工程师</p></blockquote><h2 id="Maven国内仓库"><a href="#Maven国内仓库" class="headerlink" title="Maven国内仓库"></a>Maven国内仓库</h2><p>在<code>.m2</code>文件夹中添加<code>settings.xml</code>文件<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line">&lt;settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"</span><br><span class="line">          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</span><br><span class="line">          xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd"&gt;</span><br><span class="line">    &lt;mirrors&gt;</span><br><span class="line">        &lt;!-- 阿里云仓库 --&gt;</span><br><span class="line">        &lt;mirror&gt;</span><br><span class="line">            &lt;id&gt;alimaven&lt;/id&gt;</span><br><span class="line">            &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><br><span class="line">            &lt;name&gt;aliyun maven&lt;/name&gt;</span><br><span class="line">            &lt;url&gt;http://maven.aliyun.com/nexus/content/repositories/central/&lt;/url&gt;</span><br><span class="line">        &lt;/mirror&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 中央仓库1 --&gt;</span><br><span class="line">        &lt;mirror&gt;</span><br><span class="line">            &lt;id&gt;repo1&lt;/id&gt;</span><br><span class="line">            &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><br><span class="line">            &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;</span><br><span class="line">            &lt;url&gt;http://repo1.maven.org/maven2/&lt;/url&gt;</span><br><span class="line">        &lt;/mirror&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 中央仓库2 --&gt;</span><br><span class="line">        &lt;mirror&gt;</span><br><span class="line">            &lt;id&gt;repo2&lt;/id&gt;</span><br><span class="line">            &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><br><span class="line">            &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;</span><br><span class="line">            &lt;url&gt;http://repo2.maven.org/maven2/&lt;/url&gt;</span><br><span class="line">        &lt;/mirror&gt;</span><br><span class="line">    &lt;/mirrors&gt;</span><br><span class="line">&lt;/settings&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;如果到现在你都不会&lt;code&gt;Maven&lt;/code&gt;，那请别说自己时&lt;code&gt;Java&lt;/code&gt;开发工程师&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Maven国内仓库&quot;&gt;&lt;a href=&quot;#Maven国内仓库&quot; class=&quot;h
      
    
    </summary>
    
      <category term="小窍门" scheme="http://www.halfbaker.com/categories/tips/"/>
    
    
      <category term="maven" scheme="http://www.halfbaker.com/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>基于Docker镜像的Gerrit安装与配置</title>
    <link href="http://www.halfbaker.com/2018/07/20/guider/devops/%E5%9F%BA%E4%BA%8EDocker%E9%95%9C%E5%83%8F%E7%9A%84Gerrit%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <id>http://www.halfbaker.com/2018/07/20/guider/devops/基于Docker镜像的Gerrit安装与配置/</id>
    <published>2018-07-20T00:33:59.000Z</published>
    <updated>2018-07-20T01:47:10.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Gerrit是用于代码<code>Review</code>的开源工具，具体介绍和描述详见其官网。本博文主要用于记录基于<code>Docker</code>镜像的服务搭建过程及整个过程中遇到的一些大大小小的坑。</p></blockquote><h2 id="搭建Gerrit环境"><a href="#搭建Gerrit环境" class="headerlink" title="搭建Gerrit环境"></a>搭建<code>Gerrit</code>环境</h2><p>下载<code>Gerrit</code>官方镜像并按照文档说明进行配置运行服务<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker run -dit --name gerrit -p 8002:8080 -p 29418:29418 \</span><br><span class="line">-v ~/gerrit:/var/gerrit/review_site \</span><br><span class="line">-e WEBURL=http://10.144.44.156:8002 -e AUTH_TYPE=HTTP \</span><br><span class="line">-e SMTP_SERVER=smtp.163.com \</span><br><span class="line">-e SMTP_SERVER_PORT=465 \</span><br><span class="line">-e SMTP_ENCRYPTION=ssl \</span><br><span class="line">-e SMTP_USER=xuemzhan@163.com \</span><br><span class="line">-e SMTP_PASS=zhangxuemin0813 \</span><br><span class="line">-e SMTP_FROM=xuemzhan@163.com  \</span><br><span class="line">openfrontier/gerrit</span><br></pre></td></tr></table></figure></p><p>该步骤比较简单，主要在写配置信息时需要根据自身的需求进行调整。但也可以在启动后对配置文件进行直接修改进行配置，其步骤如下：</p><ol><li><p>启动镜像服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker run -dit --name gerrit -p 29418:29418 \</span><br><span class="line">-v ~/gerrit:/var/gerrit/review_site openfrontier/gerrit</span><br></pre></td></tr></table></figure></li><li><p>打开<code>Gerrit</code>配置文件进行编辑</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> vim ~/gerrit/etc/gerrit.config</span><br></pre></td></tr></table></figure></li></ol><p>其具体的配置信息如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">[gerrit]</span><br><span class="line">        basePath = git</span><br><span class="line">        serverId = fc2c13d5-7037-48da-bb2c-dfa412807898</span><br><span class="line">        canonicalWebUrl = http://10.144.44.156:8002</span><br><span class="line">[database]</span><br><span class="line">        type = h2</span><br><span class="line">        database = /var/gerrit/review_site/db/ReviewDB</span><br><span class="line">[index]</span><br><span class="line">        type = LUCENE</span><br><span class="line">[auth]</span><br><span class="line">        type = HTTP</span><br><span class="line">        gitBasicAuthPolicy = HTTP</span><br><span class="line">[receive]</span><br><span class="line">        enableSignedPush = false</span><br><span class="line">[sendemail]</span><br><span class="line">        smtpServer = smtp.163.com</span><br><span class="line">        enable = true</span><br><span class="line">        smtpServerPort = 465</span><br><span class="line">        smtpUser = xxx@163.com</span><br><span class="line">        smtpPass = **********</span><br><span class="line">        smtpEncryption = ssl</span><br><span class="line">        sslVerify = false</span><br><span class="line">        from = xxx@163.com</span><br><span class="line">[container]</span><br><span class="line">        user = gerrit2</span><br><span class="line">        javaHome = /usr/lib/jvm/java-1.8-openjdk/jre</span><br><span class="line">[sshd]</span><br><span class="line">        listenAddress = *:29418</span><br><span class="line">[httpd]</span><br><span class="line">        listenUrl = http://*:8080/</span><br><span class="line">[cache]</span><br><span class="line">        directory = cache</span><br><span class="line">[plugins]</span><br><span class="line">        allowRemoteAdmin = true</span><br><span class="line">[plugin &quot;events-log&quot;]</span><br><span class="line">        storeUrl = jdbc:h2:/var/gerrit/review_site/db/ChangeEvents</span><br><span class="line">[gitweb]</span><br><span class="line">        cgi = /usr/share/gitweb/gitweb.cgi</span><br><span class="line">        type = gitweb</span><br></pre></td></tr></table></figure></p><blockquote><p>需要注意是<code>canonicalWebUrl</code>必须要填<code>Gerrit</code>对外的服务入口地址</p></blockquote><ol start="3"><li>重启服务<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker restart gerrit</span><br></pre></td></tr></table></figure></li></ol><h2 id="搭建Nginx代理服务"><a href="#搭建Nginx代理服务" class="headerlink" title="搭建Nginx代理服务"></a>搭建<code>Nginx</code>代理服务</h2><p>当<code>Gerrit</code>的配置文件中<code>auth</code>选择<code>HTTP</code>选项时，需要使用<code>Apache Httpd</code>或者<code>Nginx</code>代理服务进行访问。</p><ol start="0"><li><p>准备文件系统环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> mkdir -p ~/nginx/conf</span><br><span class="line"><span class="meta">$</span> cd ~/nginx/conf</span><br></pre></td></tr></table></figure></li><li><p>创建<code>Nginx</code>配置文件<code>default.conf</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> vim ~/nginx/conf/default.conf</span><br><span class="line">server &#123;</span><br><span class="line">   listen 80;</span><br><span class="line">   server_name localhost;</span><br><span class="line"></span><br><span class="line">   location / &#123;</span><br><span class="line">       auth_basic "Welcome to Gerrit Code Review";</span><br><span class="line">       auth_basic_user_file    /etc/nginx/conf.d/gerrit.passwd;</span><br><span class="line">       proxy_pass              http://gerrit:8080;</span><br><span class="line">       proxy_set_header        X-Forwarded-For $remote_addr;</span><br><span class="line">       proxy_set_header        Host $host;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   location /login/ &#123;</span><br><span class="line">       proxy_pass              http://gerrit:8080;</span><br><span class="line">       proxy_set_header        X-Forwarded-For $remote_addr;</span><br><span class="line">       proxy_set_header        Host $host;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建HTTPD用户名和密码文件<code>gerrit.passwd</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo yum install httpd</span><br><span class="line"><span class="meta">$</span> cd ~/nginx/conf</span><br><span class="line"><span class="meta">$</span> htpasswd -c gerrit.passwd gerrit #添加用户去掉`-c`参加即可</span><br></pre></td></tr></table></figure></li><li><p>运行<code>nginx</code>镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker run -dit --name nginx -p 8002:80 \</span><br><span class="line">-v  /home/xuemzhan/nginx/conf/default.conf:/etc/nginx/conf.d/default.conf \</span><br><span class="line">-v /home/xuemzhan/nginx/conf/gerrit.passwd:/etc/nginx/conf.d/gerrit.passwd \</span><br><span class="line">--link gerrit:gerrit nginx</span><br></pre></td></tr></table></figure></li></ol><h2 id="搭建基于SSL的Nginx服务"><a href="#搭建基于SSL的Nginx服务" class="headerlink" title="搭建基于SSL的Nginx服务"></a>搭建基于<code>SSL</code>的<code>Nginx</code>服务</h2><ol><li>将<code>Gerrit</code>的配置文件中的<code>canonicalWebUrl</code>修改成<code>https://10.122.44.156</code></li><li><p>在<code>~/nginx/conf</code>路径下添加认证文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cd ~/nginx/conf</span><br><span class="line"><span class="meta">$</span> openssl req -x509 -days 3650 -subj "/CN=10.122.44.156/" \</span><br><span class="line">-nodes -newkey rsa:4096 -sha256 -keyout gerrit.key -out gerrit.crt</span><br></pre></td></tr></table></figure></li><li><p>修改<code>nginx</code>的配置文件<code>default.conf</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">   listen 443;</span><br><span class="line">   server_name localhost;</span><br><span class="line"></span><br><span class="line">   ssl  on;</span><br><span class="line">   ssl_certificate      conf.d/gerrit.crt;</span><br><span class="line">   ssl_certificate_key  conf.d/gerrit.key;</span><br><span class="line"></span><br><span class="line">   location / &#123;</span><br><span class="line">       auth_basic "Welcome to Gerrit Code Review";</span><br><span class="line">       auth_basic_user_file    /etc/nginx/conf.d/gerrit.passwd;</span><br><span class="line">       proxy_pass              http://gerrit:8080;</span><br><span class="line">       proxy_set_header        X-Forwarded-For $remote_addr;</span><br><span class="line">       proxy_set_header        Host $host;</span><br><span class="line">   &#125;</span><br><span class="line">   location /login/ &#123;</span><br><span class="line">       proxy_pass              http://gerrit:8080;</span><br><span class="line">       proxy_set_header        X-Forwarded-For $remote_addr;</span><br><span class="line">       proxy_set_header        Host $host;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重新启动<code>nginx</code>镜像服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker run -dit --name nginx -p 8002:80 \</span><br><span class="line">-v  /home/xuemzhan/nginx/conf/default.conf:/etc/nginx/conf.d/default.conf \</span><br><span class="line">-v /home/xuemzhan/nginx/conf/gerrit.passwd:/etc/nginx/conf.d/gerrit.passwd \</span><br><span class="line">-v /home/xuemzhan/nginx/conf/gerrit.key:/etc/nginx/conf.d/gerrit.key \</span><br><span class="line">-v /home/xuemzhan/nginx/conf/gerrit.crt:/etc/nginx/conf.d/gerrit.crt \</span><br><span class="line">--link gerrit:gerrit nginx</span><br></pre></td></tr></table></figure></li><li><p>访问<code>https://10.122.44.156</code></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Gerrit是用于代码&lt;code&gt;Review&lt;/code&gt;的开源工具，具体介绍和描述详见其官网。本博文主要用于记录基于&lt;code&gt;Docker&lt;/code&gt;镜像的服务搭建过程及整个过程中遇到的一些大大小小的坑。&lt;/p&gt;
&lt;/blockquote&gt;
      
    
    </summary>
    
      <category term="教程系列" scheme="http://www.halfbaker.com/categories/guider/"/>
    
      <category term="Devops" scheme="http://www.halfbaker.com/categories/guider/Devops/"/>
    
    
      <category term="gerrit" scheme="http://www.halfbaker.com/tags/gerrit/"/>
    
      <category term="docker" scheme="http://www.halfbaker.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Git命令小记</title>
    <link href="http://www.halfbaker.com/2018/07/18/tips/Git%E5%91%BD%E4%BB%A4%E5%B0%8F%E8%AE%B0/"/>
    <id>http://www.halfbaker.com/2018/07/18/tips/Git命令小记/</id>
    <published>2018-07-18T06:30:34.000Z</published>
    <updated>2018-08-08T02:47:05.391Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>记录日常<code>Git</code>使用过程中的点滴</p></blockquote><h2 id="github和gitlab仓库一起使用"><a href="#github和gitlab仓库一起使用" class="headerlink" title="github和gitlab仓库一起使用"></a><code>github</code>和<code>gitlab</code>仓库一起使用</h2><ol><li><p>分别创建<code>github</code>和<code>gitlab</code>本地<code>SSH RSA Key</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ssh-keygen -t rsa -C "注册的gitlab邮箱" -f ~/.ssh/gitlab_rsa</span><br><span class="line"><span class="meta">$</span> ssh-keygen -t rsa -C "注册的gitlab邮箱" -f ~/.ssh/github_rsa</span><br></pre></td></tr></table></figure></li><li><p>将生成的<code>gitlab_rsa.pub</code>和<code>github_rsa.pub</code>拷贝到系统中<code>Profile-&gt;Settings-&gt;SSH Keys</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cat gitlab_rsa.pub | clip</span><br><span class="line"><span class="meta">$</span> cat github_rsa.pub | clip</span><br></pre></td></tr></table></figure></li><li><p>在<code>${USER}/.ssh/</code>目录下添加<code>config</code>文件，并进行配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 配置文件参数</span><br><span class="line"># Host : Host可以看作是一个你要识别的模式，对识别的模式，进行配置对应的的主机名和ssh文件</span><br><span class="line"># HostName : 要登录主机的主机名</span><br><span class="line"># Port 端口号，默认为22</span><br><span class="line"># User : 登录名</span><br><span class="line"># IdentityFile : 指明上面User对应的identityFile路径</span><br><span class="line"></span><br><span class="line"># github</span><br><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/github_rsa</span><br><span class="line">User xuemzhan</span><br><span class="line"></span><br><span class="line"># gitlab</span><br><span class="line">Host gitlab.lenovo.com</span><br><span class="line">HostName gitlab.lenovo.com</span><br><span class="line">Port 50022</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/gitlab_rsa</span><br><span class="line">User xuemzhan</span><br></pre></td></tr></table></figure></li><li><p>在不同的项目中设置用户和邮箱</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git init</span><br><span class="line"><span class="meta">$</span> git config --local user.name 'personal'</span><br><span class="line"><span class="meta">$</span> git config --local user.email 'personal@xxxx.com'</span><br><span class="line"></span><br><span class="line">```s</span><br><span class="line">5. 测试</span><br><span class="line">```shell</span><br><span class="line"><span class="meta">#</span> 测试github</span><br><span class="line"><span class="meta">$</span> ssh -T git@github.com</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 测试gitlab</span><br><span class="line"><span class="meta">$</span> ssh -T git@gitlab.com</span><br></pre></td></tr></table></figure></li><li><p>Bad owner or permissions on /home/<name>/.ssh/config</name></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>chmod 600 config</span><br></pre></td></tr></table></figure></li></ol><h2 id="git-clone-bare与git-clone-mirror区别"><a href="#git-clone-bare与git-clone-mirror区别" class="headerlink" title="git clone --bare与git clone --mirror区别"></a><code>git clone --bare</code>与<code>git clone --mirror</code>区别</h2><p>两个命令都表示克隆的版本不包含工作区，直接是版本的内容，这样克隆的版本成为裸版本库。一般约定裸版本库以<code>.git</code>为后缀。两者的区分是<code>mirror</code>克隆的对上游版本进行了注册，这样可以使用<code>git fetch</code>与上流的版本进行同步，而<code>bare</code>则没有。</p><h2 id="在提交前撤销git-commit"><a href="#在提交前撤销git-commit" class="headerlink" title="在提交前撤销git commit"></a>在提交前撤销<code>git commit</code></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 查看需要撤销的`id`</span><br><span class="line"><span class="meta">$</span> git log</span><br><span class="line"><span class="meta">#</span>完成撤销,同时将代码恢复到前一commit_id 对应的版本</span><br><span class="line"><span class="meta">$</span> git reset --hard &lt;id&gt;</span><br><span class="line"><span class="meta">#</span>完成Commit命令的撤销，但是不对代码修改进行撤销，可以直接通过git commit 重新提交对本地代码的修改</span><br><span class="line"><span class="meta">$</span> git reset &lt;id&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;记录日常&lt;code&gt;Git&lt;/code&gt;使用过程中的点滴&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;github和gitlab仓库一起使用&quot;&gt;&lt;a href=&quot;#github和gitlab仓库一起使用&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="小窍门" scheme="http://www.halfbaker.com/categories/tips/"/>
    
    
      <category term="Git" scheme="http://www.halfbaker.com/tags/Git/"/>
    
      <category term="ssh" scheme="http://www.halfbaker.com/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins+Gerrit+Gitlab构建随记</title>
    <link href="http://www.halfbaker.com/2018/07/18/guider/devops/Jenkins-Gerrit-Gitlab%E6%9E%84%E5%BB%BA%E9%9A%8F%E8%AE%B0/"/>
    <id>http://www.halfbaker.com/2018/07/18/guider/devops/Jenkins-Gerrit-Gitlab构建随记/</id>
    <published>2018-07-18T01:29:07.000Z</published>
    <updated>2018-07-20T00:35:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>端口设定<br>名称|端口号<br>-|-<br>gitlab | 443, 8001, 50022<br>jenkins  | 8080,50000</p><h2 id="Gitlab-ce安装"><a href="#Gitlab-ce安装" class="headerlink" title="Gitlab-ce安装"></a><code>Gitlab-ce</code>安装</h2><ol><li>创建<code>gitlab</code>文件夹用于保存数据与配置</li><li>使用<code>Docker</code>启动镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker run -d --name gitlab --restart always -p 443:443 -p 8001:80 -p 50022:22 \</span><br><span class="line"> -v  ~/gitlab/config:/etc/gitlab -v ~/gitlab/logs:/var/log/gitlab -v ~/gitlab/data:/var/opt/gitlab gitlab/gitlab-ce</span><br></pre></td></tr></table></figure><ol start="3"><li>登入容器修改配置<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker exec -it gitlab /bin/bash</span><br><span class="line"><span class="meta">$</span> vim /etc/gitlab/gitlab.rb</span><br><span class="line"><span class="meta">$</span> docker restart gitlab</span><br></pre></td></tr></table></figure></li></ol><h2 id="Jenkins安装"><a href="#Jenkins安装" class="headerlink" title="Jenkins安装"></a><code>Jenkins</code>安装</h2><ol><li>下载<code>Jenkins</code>的(<code>Docker</code>镜像文件)[<a href="https://hub.docker.com/_/jenkins/]" target="_blank" rel="noopener">https://hub.docker.com/_/jenkins/]</a></li><li>设置数据卷并启动镜像<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker run -dit --restart always --name jenkins -p 8080:8080 -p 50000:50000 \</span><br><span class="line">-v /home/$&#123;USER&#125;/jenkins:/var/jenkins_home jenkins</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span># `Gerrit`安装与配置 ##</span><br><span class="line"></span><br><span class="line">```shell</span><br><span class="line"><span class="meta">$</span> docker run -dit -p 8002:8080 -p 29418:29418 -v ~/gerrit:/var/gerrit/review_site -e WEBURL=http://10.144.44.156:8002 -e AUTH_TYPE=HTTP -e SMTP_SERVER=smtp.163.com -e SMTP_SERVER_PORT=465 -e SMTP_ENCRYPTION=ssl -e SMTP_USER=xuemzhan@163.com -e SMTP_PASS=zhangxuemin0813 -e SMTP_FROM=xuemzhan@163.com --name gerrit openfrontier/gerrit</span><br></pre></td></tr></table></figure></li></ol><p>安装<code>Nginx</code>反向代理<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker run -dit --name nginx -p 443:443 -v /home/xuemzhan/nginx/conf/default.conf:/etc/nginx/conf.d/default.conf -v /home/xuemzhan/nginx/conf/gerrit.passwd:/etc/nginx/conf.d/gerrit.passwd --link gerrit:gerrit xuemzhan/nginx_ssl_gerrit</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h2&gt;&lt;p&gt;端口设定&lt;br&gt;名称|端口号&lt;br&gt;-|-&lt;br&gt;gitlab | 443, 8001, 50022&lt;br&gt;jenkins  | 8080,
      
    
    </summary>
    
      <category term="教程系列" scheme="http://www.halfbaker.com/categories/guider/"/>
    
      <category term="Devops" scheme="http://www.halfbaker.com/categories/guider/Devops/"/>
    
    
      <category term="Gitlab" scheme="http://www.halfbaker.com/tags/Gitlab/"/>
    
      <category term="Gerrit" scheme="http://www.halfbaker.com/tags/Gerrit/"/>
    
      <category term="Jenkins" scheme="http://www.halfbaker.com/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>CentOS命令小记</title>
    <link href="http://www.halfbaker.com/2018/07/17/tips/CentOS%E5%91%BD%E4%BB%A4%E5%B0%8F%E8%AE%B0/"/>
    <id>http://www.halfbaker.com/2018/07/17/tips/CentOS命令小记/</id>
    <published>2018-07-17T10:32:46.000Z</published>
    <updated>2018-07-19T03:13:12.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>涉及到的<code>CentOS</code>命令</p></blockquote><h2 id="普通用户sudo免密码配置"><a href="#普通用户sudo免密码配置" class="headerlink" title="普通用户sudo免密码配置"></a>普通用户sudo免密码配置</h2><ol><li><p>修改对应文件权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo chmod u+w /etc/sudoers</span><br><span class="line"><span class="meta">$</span> sudo vi /etc/sudoers</span><br></pre></td></tr></table></figure></li><li><p>查找 <code>root    ALL=(ALL)       ALL</code>在其下一行， 添加或者取消注释 <code>infomgr ALL=(ALL) NOPASSWD: ALL</code></p></li><li>检验<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo chmod u-w /etc/sudoers</span><br><span class="line"><span class="meta">$</span> sudo whoami</span><br></pre></td></tr></table></figure></li></ol><h2 id="非root用户Docker免sudo"><a href="#非root用户Docker免sudo" class="headerlink" title="非root用户Docker免sudo"></a>非root用户Docker免sudo</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo groupadd docker</span><br><span class="line"><span class="meta">$</span> sudo gpasswd -a $&#123;USER&#125; docker</span><br><span class="line"><span class="meta">$</span> sudo chmod u+rw /var/run/docker.socket</span><br><span class="line"><span class="meta">$</span> sudo service docker restart</span><br></pre></td></tr></table></figure><h2 id="添加删除用户"><a href="#添加删除用户" class="headerlink" title="添加删除用户"></a>添加删除用户</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo userdel -rf &lt;USER&gt;</span><br></pre></td></tr></table></figure><h2 id="安装Apache2"><a href="#安装Apache2" class="headerlink" title="安装Apache2"></a>安装Apache2</h2><blockquote><p>Apache默认将网站的根目录指向/var/www/html<br>默认的主配置文件/etc/httpd/conf/httpd.conf<br>配置存储在的/etc/httpd/conf.d/目录<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo yum install httpd</span><br><span class="line"><span class="meta">$</span> sudo systemctl enable httpd.service</span><br><span class="line"><span class="meta">$</span> sudo systemctl is-enabled httpd.service</span><br><span class="line"><span class="meta">$</span> systemctl  start |stop | restart httpd.service</span><br></pre></td></tr></table></figure></p></blockquote><p>Centos 7使用firewalld代替了原来的iptables。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br><span class="line"><span class="meta">$</span> firewall-cmd --reload</span><br><span class="line"><span class="meta">$</span> firewall-cmd --state</span><br></pre></td></tr></table></figure></p><h2 id="Docker镜像加速"><a href="#Docker镜像加速" class="headerlink" title="Docker镜像加速"></a>Docker镜像加速</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&apos;EOF&apos;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://1mwzv8d2.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;涉及到的&lt;code&gt;CentOS&lt;/code&gt;命令&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;普通用户sudo免密码配置&quot;&gt;&lt;a href=&quot;#普通用户sudo免密码配置&quot; class=&quot;headerlink&quot; title=&quot;普通用户su
      
    
    </summary>
    
      <category term="小窍门" scheme="http://www.halfbaker.com/categories/tips/"/>
    
    
      <category term="CentOS" scheme="http://www.halfbaker.com/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>敏捷摘记</title>
    <link href="http://www.halfbaker.com/2018/07/17/tips/%E6%95%8F%E6%8D%B7%E6%91%98%E8%AE%B0/"/>
    <id>http://www.halfbaker.com/2018/07/17/tips/敏捷摘记/</id>
    <published>2018-07-17T07:47:42.000Z</published>
    <updated>2018-07-17T07:52:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础与概念"><a href="#基础与概念" class="headerlink" title="基础与概念"></a>基础与概念</h2><ul><li><code>scrum team</code>: 整个组织架构中可进行独立开发的最小团队, 一般人数控制在5~10人左右</li><li><code>sprint</code>：项目开发过程中最小迭代周期，根据同的项目周期不同；现有产品维护1~5天，二次开发5~10，新项目5~30，业务复杂或开发所用语言较多或开发复杂度较高10~45</li><li><code>point</code>：不可拆分的最小功能点数，1point等于多少小时，可以由项目主管按照项目的实际情况指定。</li><li><code>Product Backlog</code>：由PO负责管理，将所有epic按优先顺序排列的一个产品需求列表。</li><li><code>Sprint Backlog</code>：通过Sprint Planning Meeting，由PM、PO、SM从product backlog中挑选出一个或多个Story作为本次迭代完成的目标</li><li><code>epic</code>：一个包含完成功能的需求描述，可以被拆分为1个或多个stroy，一般有PO划分</li><li><code>story</code>：一个不可拆分子功能描述，可以被拆分为1个过多个task，一般由PO将epic拆分为story，在Sprint Planning Pre-Plan Meeting中PO、SM确定story是否合理并做相应的调整。</li><li><code>task</code>：最小可用于开发的任务，在sprint开始时由ST将story拆分为task，并在当前sprint中完成</li><li><code>product Master(PM)</code>：管理整个项目的整体进度，也可叫做scrum master of scrums.</li><li><code>product owner(PO)</code>：管理整个项目或多个scrum team的需求，并将需求转换为epic或story，指定软件交付日期，指定交付标准，有权力接受或拒绝开发团队的工作成果</li><li><code>scrum master(SM)</code>：整体控制一个scrum能过承接的point数；监控每个sprint的整体进度；协调与其他scrum team之间的沟通</li><li><code>technique leader(TL)</code>：整个项目或多个scrum team或一个scrum team的技术专家，主要负责在开发过程中给出技术解决方案或建议</li><li><code>scrum team member(ST)</code>：scrum项目成员，主要负责开发，以及将指派给自己的story拆分为task</li><li><code>Sprint Planning Pre-Plan Meeting</code>：PO、SM确定挑选story为后期sprint做准备，一般提前2个sprint</li><li><code>Sprint Planning Meeting</code>：在sprint之前PO将下个sprint需要完成的story交付给SM，SM需要根据目前ST的能力确认point数，此时应该确认或拒绝下一个sprint所有需求。</li><li><code>Sprint start meeting</code>：在sprint的第一天将当前sprint的story指派给相关ST，除非TL提出异议并且征得PO或PM同意，否则所有stroy必须在当前sprint完成。</li><li><code>Srpint Review Meeting</code>：也叫Srpint Demo Meeting，将这个sprint的成果演示给PO，由PO确认演示内容是否符合交付标准，并提出改善意见。</li><li><code>Sprint Retrospective Meeting</code>：回顾会议，SM、ST、TL，PO参与对于上一个sprint成果总结，优点继续保持，缺点或缺陷根据实际情况由PO决定是否建立story放入Product Backlog中，在以后或下一个sprint中完善。</li><li><code>Daily Scrum Meeting</code>：也叫stand up meeting，每天占用5~15分钟汇报、分享、提出问题。特别注意此会议不解决任何问题。</li><li><code>Scrum of Scurms meeting</code>：大型项目需要，多个scrum team协同开发时，多个Team SM参与讨论会议；对上一个sprint总结汇报，并提出相关意见，如果涉及到代码改善意见，需要请PO确认是否建立story；下一个sprint资源确认，是否需要其他Team协助，是否有人力资源调整等问题</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基础与概念&quot;&gt;&lt;a href=&quot;#基础与概念&quot; class=&quot;headerlink&quot; title=&quot;基础与概念&quot;&gt;&lt;/a&gt;基础与概念&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;scrum team&lt;/code&gt;: 整个组织架构中可进行独立开发的最小团队, 一般人数控制
      
    
    </summary>
    
      <category term="同心同德" scheme="http://www.halfbaker.com/categories/team/"/>
    
    
      <category term="scrum" scheme="http://www.halfbaker.com/tags/scrum/"/>
    
  </entry>
  
  <entry>
    <title>ELK平台搭建</title>
    <link href="http://www.halfbaker.com/2018/07/16/tech/log/ELK%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/"/>
    <id>http://www.halfbaker.com/2018/07/16/tech/log/ELK平台搭建/</id>
    <published>2018-07-16T03:49:45.000Z</published>
    <updated>2018-07-18T06:52:34.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="温故知新" scheme="http://www.halfbaker.com/categories/tech/"/>
    
      <category term="架构" scheme="http://www.halfbaker.com/categories/tech/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="日志" scheme="http://www.halfbaker.com/tags/%E6%97%A5%E5%BF%97/"/>
    
      <category term="ELK" scheme="http://www.halfbaker.com/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>Jupyter使用杂记</title>
    <link href="http://www.halfbaker.com/2018/07/13/tips/Jupyter%E4%BD%BF%E7%94%A8%E6%9D%82%E8%AE%B0/"/>
    <id>http://www.halfbaker.com/2018/07/13/tips/Jupyter使用杂记/</id>
    <published>2018-07-13T05:03:11.000Z</published>
    <updated>2018-07-13T05:08:26.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><code>Jupyter</code>是学习、记录和传授的超级工具，其可见可得，代码和文档一起的风格，我都要爱死了。</p></blockquote><h3 id="Jupyter-Notebook设置远程访问"><a href="#Jupyter-Notebook设置远程访问" class="headerlink" title="Jupyter Notebook设置远程访问"></a>Jupyter Notebook设置远程访问</h3><p>修改<code>jupyter_notebook_config.py</code>文件中的<code>c.NotebookApp.ip</code>属性为’*’<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> vim ~/.jupyter/jupyter_notebook_config.py</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Jupyter&lt;/code&gt;是学习、记录和传授的超级工具，其可见可得，代码和文档一起的风格，我都要爱死了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Jupyter-Notebook设置远程访问&quot;&gt;&lt;a href=&quot;#Jupy
      
    
    </summary>
    
      <category term="小窍门" scheme="http://www.halfbaker.com/categories/tips/"/>
    
    
      <category term="jupyter" scheme="http://www.halfbaker.com/tags/jupyter/"/>
    
  </entry>
  
  <entry>
    <title>Anaconda命令小记</title>
    <link href="http://www.halfbaker.com/2018/07/13/tips/Anaconda%E5%91%BD%E4%BB%A4%E5%B0%8F%E8%AE%B0/"/>
    <id>http://www.halfbaker.com/2018/07/13/tips/Anaconda命令小记/</id>
    <published>2018-07-13T03:34:08.000Z</published>
    <updated>2018-07-13T03:55:40.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Anconda 学习与使用机器学习和深度学习必不可少的工具，本博文将不断记录工作中碰到的需要记忆的命令和一些使用上的小窍门，主要是为了方便今后查询及记忆</p></blockquote><h3 id="添加国内镜像"><a href="#添加国内镜像" class="headerlink" title="添加国内镜像"></a>添加国内镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">conda config --set show_channel_urls yes</span><br></pre></td></tr></table></figure><h3 id="恢复默认的源"><a href="#恢复默认的源" class="headerlink" title="恢复默认的源"></a>恢复默认的源</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda config --remove-key channels</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Anconda 学习与使用机器学习和深度学习必不可少的工具，本博文将不断记录工作中碰到的需要记忆的命令和一些使用上的小窍门，主要是为了方便今后查询及记忆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;添加国内镜像&quot;&gt;&lt;a href=&quot;#添加国
      
    
    </summary>
    
      <category term="小窍门" scheme="http://www.halfbaker.com/categories/tips/"/>
    
    
      <category term="Anaconda" scheme="http://www.halfbaker.com/tags/Anaconda/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes概述与架构</title>
    <link href="http://www.halfbaker.com/2018/06/24/tech/k8s/Kubernetes%E6%A6%82%E8%BF%B0%E4%B8%8E%E6%9E%B6%E6%9E%84/"/>
    <id>http://www.halfbaker.com/2018/06/24/tech/k8s/Kubernetes概述与架构/</id>
    <published>2018-06-24T10:02:19.000Z</published>
    <updated>2018-06-24T13:58:34.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>Kubernetes</code>是一个用于管理容器化应用和服务的轻便和可扩展的开源平台。通过<code>Kubernetes</code>能够进行应用的自动化部署和扩缩容。在<code>Kubernetes</code>中，会将组成应用的容器组合成一个逻辑单元以更易管理和发现。</p><h2 id="主要特性"><a href="#主要特性" class="headerlink" title="主要特性"></a>主要特性</h2><p>1.自动化装箱：对资源的要求和约束自动部署容器，同时为了提高利用率和节省更多资源，将关键和最佳工作量结合在一起。</p><p>2.自愈能力：当容器失败时，对容器进行重启；当部署的Node节点有问题时，对容器进行重新部署和重新调度；当容器未通过监控检查时，会关闭容器；只有容器正常运行，才会对外提供服务。</p><p>3.水平扩展：通过简单命令、用户界面或者基于CPU的适用情况对应用容器进行扩展。</p><p>4.服务发现和负载均衡：基于Kubernetes进行服务发现和负载均衡，开发者不需要适用额外的服务发现机制。</p><p>5.自动发布和回滚：<code>Kubernetes</code>能够程序化的发布应用和相关配置，如果发布有问题，能够会贵发生的变更。</p><p>6.保密和配置管理： 在不需要重新构建镜像的情况下，可以部署和更新保密和应用配置。</p><p>7.存储编排：自动挂接本地、公有云、网络存储系统。</p><h2 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h2><p><code>Kubernetes</code>属于主从分布架构，主要由<code>Master Node</code>、<code>Worker Node</code>、<code>Kubectl</code>和其他附加项构成。</p><p><img src="/2018/06/24/tech/k8s/Kubernetes概述与架构/k8s_arch.png" alt="k8s_arch"></p><h2 id="Master-Node"><a href="#Master-Node" class="headerlink" title="Master Node"></a>Master Node</h2><p><code>Master Node</code>是控制节点，对整个集群进行调度管理。它由<code>API Server</code>、<code>Scheduler</code>、<code>Cluster State Store</code>和<code>Controller-Manager</code>组成.</p><h3 id="API-Server"><a href="#API-Server" class="headerlink" title="API Server"></a>API Server</h3><p><code>API Server</code>是所有<code>REST</code>命令的入口，用于<code>REST</code>的操作，确保它们生效，执行相关业务逻辑，以及更新<code>etcd</code>。另外，<code>API Server</code>作为集群网关。默认情况下，客户端通过<code>API Server</code>对集群进行访问。</p><h3 id="Scheduler"><a href="#Scheduler" class="headerlink" title="Scheduler"></a>Scheduler</h3><p><code>Scheduler</code>组件为容器自动选择运行的主机。依据请求资源的可用性，服务请求的质量等约束条件，监控未绑定的<code>pod</code>, 并将其绑定至特定的<code>node</code>节点。 <code>Scheduler</code>可以依据的调度策略主要有<code>预选策略</code>和<code>优选策略</code>。</p><h3 id="Cluster-State-Store"><a href="#Cluster-State-Store" class="headerlink" title="Cluster State Store"></a>Cluster State Store</h3><p><code>Kubernetes</code>默认使用<code>etcd</code>作为集群整体存储。<code>etcd</code>是一个简单的、分布式的、一致的<code>key-value</code>存储，主要被用来共享配置和服务发现。<code>etcd</code>提供了一系列<code>CRUD</code>操作<code>API</code>，以及作为注册的接口用于监控置顶的<code>Node</code>。集群所有的状态都存储在<code>etcd</code>实例中，并具有监控能力，当<code>etcd</code>中的信息发生变化时，就能够快速的通知集群相关的组件。</p><h3 id="Controller-Manager"><a href="#Controller-Manager" class="headerlink" title="Controller-Manager"></a>Controller-Manager</h3><p>用于执行大部分的集群层次功能，它即执行例如命名空间创建、生命周期管理、事件垃圾收集、已终止垃圾收集、联级删除垃圾收集、node垃圾收集等生命周期功能，也执行例如<code>pod</code>的弹性扩容等API业务逻辑。控制管理提供自愈能力、扩容、应用生命周期管理、服务发现、路由、服务绑定等。</p><h2 id="Worker-Node"><a href="#Worker-Node" class="headerlink" title="Worker Node"></a>Worker Node</h2><p><code>Worker Node</code>作为真正的工作节点，运行业务应用的容器；其包含kubelet、kube proxy和Container Runtime</p><h3 id="kubelet"><a href="#kubelet" class="headerlink" title="kubelet"></a>kubelet</h3><p><code>Kubelet</code>是<code>Pod</code>和<code>Node API</code>的主要实现者，并负责驱动容器执行层，负责管理<code>Pod</code>、容器、镜像和数据卷，实现集群对节点的管理，并将容器的运行状态汇报给<code>Kubernetes API Server</code>。在<code>Kubernetes</code>中，<code>Pod</code>作为基本的执行单元，它可以拥有多个容器和存储数据卷，能够方便在每一个容器中打包一个单一的应用，从而解耦了应用构建时和部署时的所关心的事项，已经能够方便在物理机/虚拟机之间进行迁移。<code>API</code>准入控制可以拒绝<code>Pod</code>，或者为<code>Pod</code>添加外的调度约束，但是<code>Kubelet</code>才是<code>Pod</code>是否能够运行在特定<code>Node</code>上的最终裁决者。</p><h3 id="Container-Runtime"><a href="#Container-Runtime" class="headerlink" title="Container Runtime"></a>Container Runtime</h3><p>每一个<code>Node</code>都会运行一个<code>Container Runtime</code>, 其负责下载镜像和运行容器。 <code>Kubernetes</code>本身不提供容器运行环境，但提供了接口，可以插入所选择的容器运行时环境。<code>Kubelet</code>使用<code>Unix socket</code>之上的<code>gRPC</code>框架与容器运行时进行通信， <code>Kubelet</code>作为客户端，<code>CRI shim</code>作为服务器。</p><p><img src="/2018/06/24/tech/k8s/Kubernetes概述与架构/container_runtime.png" alt="container_runtime"></p><p><code>protocal buffers API</code>提供<code>ImageService</code>和<code>RuntimeService</code>两个<code>gRPC</code>服务。<code>ImageService</code>提供拉去、查看和移除镜像的<code>RPC</code>。<code>RuntimeService</code>则提供管理<code>Pods</code>和容器生命周期管理的<code>RPC</code>，以及与容器进行交互(exec/attach/port-forward)。</p><h3 id="Kube-proxy"><a href="#Kube-proxy" class="headerlink" title="Kube proxy"></a>Kube proxy</h3><p>基于一种公共访问策略（例如：负载均衡），服务提供了一种访问一群<code>pod</code>的途径。此方式通过创建一个虚拟的IP来实现，客户端能够访问此IP，并能够将服务透明的代理至<code>Pod</code>。每一个<code>Node</code>都会运行一个<code>kube-proxy</code>，<code>kube proxy</code>通过<code>iptables</code>规则引导访问至服务IP，并将重定向至正确的后端应用，通过这种方式<code>kube-proxy</code>提供了一个高可用的负载均衡解决方案。服务发现主要通过DNS实现。</p><p>在<code>Kubernetes</code>中，<code>kube proxy</code>负责为<code>Pod</code>创建代理服务；引到访问至服务；并实现服务到Pod的路由和转发，以及通过应用的负载均衡。</p><h2 id="Kubectl"><a href="#Kubectl" class="headerlink" title="Kubectl"></a>Kubectl</h2><p>kubectl是Kubernetes集群的命令行接口。运行kubectl命令的语法如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> kubectl [command] [TYPE] [NAME] [flags]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;Kubernetes&lt;/code&gt;是一个用于管理容器化应用和服务的轻便和可扩展的开源平台。通过&lt;code&gt;Kubernetes&lt;/code&gt;能够进行应用的自动化部署和扩缩容。在&lt;code&gt;Kubernetes&lt;/code&gt;中，会将组成应用的容器组合成一个逻辑单元
      
    
    </summary>
    
      <category term="温故知新" scheme="http://www.halfbaker.com/categories/tech/"/>
    
      <category term="架构" scheme="http://www.halfbaker.com/categories/tech/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="架构" scheme="http://www.halfbaker.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="k8s" scheme="http://www.halfbaker.com/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>强化学习要点</title>
    <link href="http://www.halfbaker.com/2018/06/23/tech/ai/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9/"/>
    <id>http://www.halfbaker.com/2018/06/23/tech/ai/强化学习要点/</id>
    <published>2018-06-23T14:54:57.000Z</published>
    <updated>2018-06-24T08:57:52.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>广袤的塞伦盖蒂大草原上，一只角马的幼崽刚刚降生。它挣扎着，努力的站起来，一开始摇摇晃晃，不断的跌倒又站起，然后慢慢的站稳了，并开始向前走，再接着开始奔跑，来到角马母亲身旁，然后享受甘甜的乳汁。</p></blockquote><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>强化学习是机器学习的一个重要分支，主要是用于解决<code>decision making</code>问题，可以自主进行（连续）决策。它主要包含<code>Agent</code>, <code>Environment</code>, <code>Action</code>, <code>Reward</code>四个元素，其目标是获取最大的<code>Reward</code>。</p><p><img src="/2018/06/23/tech/ai/强化学习要点/reinenforce_learning_definition.png" alt="reinenforce_learning_definition"></p><h2 id="与（非）监督学习的区别"><a href="#与（非）监督学习的区别" class="headerlink" title="与（非）监督学习的区别"></a>与（非）监督学习的区别</h2><p>我们通常说机器学习包含<code>监督学习</code>和<code>非监督学习</code>，但在定义中<code>强化学习</code>也是机器学习的一个重要分支，那么它与传统的监督学习与非监督学习的区别是什么？</p><h3 id="与监督学习的对比"><a href="#与监督学习的对比" class="headerlink" title="与监督学习的对比"></a>与监督学习的对比</h3><p>1.监督学习训练集结果有标签；强化学习没有，需要尝试一些行为得出一个结果然后根据结果的反馈调整之前的行为。</p><p>2.监督学习算法能够从结果中马上得到反馈；强化学习的结果反馈有延时，有时要经过好几步后才能知晓前面的行为是否有问题。</p><p>3.监督学习的输入是独立分布的；强化学习输入总在变化，当算法做出一个行为时，它能够影响下一个输入，输入是相关联的。</p><p>4.监督学习一般只会尝试过去经验中最有效的行为（<code>exploitation</code>）；强化学习可以在尝试不同事务（<code>exploration</code>）和尝试过去经验中最有效行为（<code>exploitation</code>）两者中找到平衡点，从而得到最大回报。</p><p>5.监督学习会学习得到一个输入与输出的映射关系；强化学习给出的是<code>reward function</code>，用来判断行为的好坏。</p><h3 id="与非监督学习的对比"><a href="#与非监督学习的对比" class="headerlink" title="与非监督学习的对比"></a>与非监督学习的对比</h3><blockquote><p>在用户推荐系统中，非监督学习会找出与用户先前行为类似的行为；强化学习则通过向用户推荐一些，等待用户反馈后修正对用户的推荐。</p></blockquote><p>非监督学习得到的结果是输入与输出的模式；强化学习得到是映射。</p><h2 id="算法分类"><a href="#算法分类" class="headerlink" title="算法分类"></a>算法分类</h2><p>强化学习的算法可以以<code>reward</code>,<code>action</code>,<code>policy</code>几个主要元素角度进行区分.</p><p><code>Reward based</code>是算法关注找到最优奖励总和；</p><p><code>Action based</code>是算法关注找到每一步的最优行动；</p><p><code>Policy based</code>是算法关注找到最优的策略；</p><p>在上述的基础上，还有进行更加细分区分：</p><table><thead><tr><th>算法</th><th>Model-free</th><th>Model-based</th><th>Policy-based</th><th>Reward-based</th><th>MC-update</th><th>TD-update</th><th>On-policy</th><th>Off-policy</th></tr></thead><tbody><tr><td>QLearning</td><td>True</td><td>True</td><td></td><td>True</td><td></td><td>True</td><td></td><td>True</td></tr><tr><td>Sarsa</td><td>True</td><td>True</td><td></td><td>True</td><td></td><td>True</td><td>True</td><td></td></tr><tr><td>Policy Gradients</td><td>True</td><td>True</td><td>True</td><td></td><td>True</td><td></td><td></td><td></td></tr><tr><td>Actor-critic</td><td></td><td></td><td>True</td><td>True</td><td></td><td></td><td></td><td></td></tr><tr><td>Policy Gradients V2</td><td></td><td></td><td></td><td></td><td></td><td>True</td><td></td><td></td></tr><tr><td>MC learning</td><td></td><td></td><td></td><td></td><td>True</td><td></td><td></td><td></td></tr><tr><td>Sarsa lambda</td><td></td><td></td><td></td><td></td><td></td><td></td><td>True</td><td></td></tr><tr><td>Deep Q Network</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>True</td></tr></tbody></table><p><code>Model-free</code>: 不尝试去理解环境，环境给什么就是什么，一步一步等待真是世界的反馈，再根据反馈采取下一步的行动；<br><code>Model-based</code>: 先理解真实世界是怎样的，并建立一个模型来模拟现实世界的反馈，然后通过想想来预判接下来将要发生的所有情况，选择这些想象中最好的，并依据这种情况采取下一步策略，相对于<code>Model-free</code>算法多处一个虚拟环境，更有想象力；<br><code>Policy-based</code>: 通过感官分析所处的环境，直接输出下一步要采取的各种动作的概率，然后根据概率采取行动；<br><code>Reward-based</code>: 输出的是所有动作的价值，根据最高价值来选动作，这类方法不能选区联系的动作；<br><code>MC-update</code>: <code>Monte-carlo update</code>是指游戏开始后，要等待游戏结束后，然后再总结这一回合中的所有转折点，再更新新的行为准则；<br><code>TD-update</code>: <code>Temporal-difference update</code>是指在游戏进行中每一步都在更新，不用等待游戏结束，这样就能边玩边学;<br><code>On-policy</code>： 必须本人在场，且一定是本人边玩边学习；<br><code>Off-policy</code>: 可以选择自己玩也可以看着别人玩，通过看别人玩来学习别人的行为准则；</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>1.<a href="https://blog.csdn.net/aliceyangxi1987/article/details/73327378" target="_blank" rel="noopener">一文了解强化学习</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;广袤的塞伦盖蒂大草原上，一只角马的幼崽刚刚降生。它挣扎着，努力的站起来，一开始摇摇晃晃，不断的跌倒又站起，然后慢慢的站稳了，并开始向前走，再接着开始奔跑，来到角马母亲身旁，然后享受甘甜的乳汁。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;定
      
    
    </summary>
    
      <category term="温故知新" scheme="http://www.halfbaker.com/categories/tech/"/>
    
      <category term="AI" scheme="http://www.halfbaker.com/categories/tech/AI/"/>
    
      <category term="强化学习" scheme="http://www.halfbaker.com/categories/tech/AI/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="http://www.halfbaker.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="强化网络" scheme="http://www.halfbaker.com/tags/%E5%BC%BA%E5%8C%96%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>数据库的分库与分表</title>
    <link href="http://www.halfbaker.com/2018/06/13/tech/arch/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%88%86%E5%BA%93%E4%B8%8E%E5%88%86%E8%A1%A8/"/>
    <id>http://www.halfbaker.com/2018/06/13/tech/arch/数据库的分库与分表/</id>
    <published>2018-06-13T05:47:37.000Z</published>
    <updated>2018-06-22T03:14:40.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在系统设计与架构时，绝大多数是绕不开数据库的。数据库的选型、部署方案、数据结构的切分、优化等等都是一系列需要思考的。文本针对数据库优化中的分库分表做一些阐述。</p></blockquote><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>什么是最好的数据库分库分表方案？ 不需要分库分表的方案是最好的。但随着业务的发展，系统数据量和访问量的增加，有时候要进入到不得不分库分表的阶段。总结起来，分库分表的原因可以归结为：</p><ol><li>数据的读取量急剧增加，以至于内存不能满足其需求，说白了就是内存容量不够；</li><li>数据的读取变化频幅很快，以至于查询的数据不是来自于内存还是来自硬盘；</li><li>数据的写操作超过了磁盘负载，以至于数据副本的同步更新远落后与写入操作；</li></ol><p>具体到数据库层面，表现为：</p><ol><li>数据库读写请求量太大；</li><li>单库数据过大；</li><li>单表数据过大；</li></ol><p>因此，所有的分库分表方案都是基于解决上述三个问题。</p><h3 id="面临的问题"><a href="#面临的问题" class="headerlink" title="面临的问题"></a>面临的问题</h3><p>俗话说“有得必有失”，针对数据库的分库分表操作也一样。进行分库分表后可能付出的代价可能有以下几种：</p><blockquote><ol><li>原先的<code>SQL</code>语句不再是申明式的</li></ol></blockquote><p>数据库通过<code>SQL</code>语句获知用户的意图，然后适用优化器进行优化，并将优化后的<code>SQL</code>转换成获取程序。分库分表后，这种优势可能被打破。</p><blockquote><ol start="2"><li>可能会导致大量的网络延时</li></ol></blockquote><p>在分布式环境下，查询语句必须要通过<code>KV</code>映射，访问多个网络节点，或者将<code>WHERE</code>条件放在他们将被执行的节点上, 但是即使在最好的情况下，涉及到多个网络访问都会更加复杂。</p><blockquote><ol start="3"><li>将会失去一些<code>SQL</code>的强大功能</li></ol></blockquote><p>例如外键约束等</p><blockquote><ol start="4"><li>异步查询的数据不能顺序返回</li></ol></blockquote><p>当相同类型的数据存放在多个节点上（例如用户数据存放在A,B,C节点上），水平查询需要访问所有节点，数据访问时间直接因以节点数线性增长。除非多个节点是以并行方式访问，然后再以<code>MapReduce</code>的方式聚合。前提是需要提供异步通信的<code>API</code>，但这并不存在于<code>MySQL</code>提供的功能中, 可选的方案是在子进程中增加很多的forking和连接。</p><h2 id="切分方法"><a href="#切分方法" class="headerlink" title="切分方法"></a>切分方法</h2><p>切分方法多种多样，本文将从架构层级切分和物理层级切分进行简要描述。</p><h3 id="架构层级切分"><a href="#架构层级切分" class="headerlink" title="架构层级切分"></a>架构层级切分</h3><table><thead><tr><th>切分方法</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>业务功能切分</td><td>相关表都在本地，可以享受声明式的SQL语句好处， 网络延时少</td><td>可能出现单个表单数据过大的情况</td></tr><tr><td>业务应用层切分</td><td>可选的方案多，灵活</td><td>处理细节多，技术细节复杂。</td></tr></tbody></table><h3 id="物理切分"><a href="#物理切分" class="headerlink" title="物理切分"></a>物理切分</h3><table><thead><tr><th>方法</th><th>垂直切分</th><th>水平切分</th></tr></thead><tbody><tr><td>分表</td><td>大表切成小表， 拆分字段， 建扩展表</td><td>对数据量巨大的单表按照某种规则(RANGE, HASH取模等)，切分成多张表</td></tr><tr><td>分库</td><td>针对不同业务进行拆分</td><td>将单张表切分到多个服务器中</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在系统设计与架构时，绝大多数是绕不开数据库的。数据库的选型、部署方案、数据结构的切分、优化等等都是一系列需要思考的。文本针对数据库优化中的分库分表做一些阐述。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在
      
    
    </summary>
    
      <category term="温故知新" scheme="http://www.halfbaker.com/categories/tech/"/>
    
      <category term="架构" scheme="http://www.halfbaker.com/categories/tech/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="mysql" scheme="http://www.halfbaker.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>深度学习通用优化方法</title>
    <link href="http://www.halfbaker.com/2018/06/12/tech/ai/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E9%80%9A%E7%94%A8%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95/"/>
    <id>http://www.halfbaker.com/2018/06/12/tech/ai/深度学习通用优化方法/</id>
    <published>2018-06-12T13:47:45.000Z</published>
    <updated>2018-06-13T01:55:44.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>深度学习的最终目标是找到最优或者近似最优的模型。当有一个模型被训练出来后，怎么去改进？是否有一个通用的方法？</p></blockquote><h2 id="土豪法"><a href="#土豪法" class="headerlink" title="土豪法"></a>土豪法</h2><p>你认识或者自己就是研究领域的专家，拥有强大<code>GPU</code>计算集群，几乎没有限制的训练数据，先进模型的理论、架构与设计。最后有足够的时间和耐心，或者有助手帮助调参，迭代模型。</p><h2 id="通用法"><a href="#通用法" class="headerlink" title="通用法"></a>通用法</h2><p>通用法一般通过迁移开源的先进的模型、总结一些常用超参的调优手法进行改善模型的拟合时间和准确性。具体可以分为以下几个步骤：</p><h3 id="模型迁移前的准备："><a href="#模型迁移前的准备：" class="headerlink" title="模型迁移前的准备："></a>模型迁移前的准备：</h3><p>了解最新理论成果与理想的或者目前实践上最优的模型，研究其预训练体系结构。了解迁移学习的好处，思考要解决问题的领域与现有模型的共性问题。</p><h3 id="模型的裁剪"><a href="#模型的裁剪" class="headerlink" title="模型的裁剪"></a>模型的裁剪</h3><p>模型的前几层，主要是提取通用的和可以解释的特征。在迁移时，不需要修改和调整。输出层则需要进行修改，主要是使用适合应用领域的激活函数和输出维度替换模型的默认输出。</p><h3 id="训练优化"><a href="#训练优化" class="headerlink" title="训练优化"></a>训练优化</h3><p>1.使用较小的学习率，这是因为预训练的权重通常优于随机初始化的权重，因此修改要更为精细。<br>2.使用<code>Dropout</code>层。和传统的回归模型的<code>Ridge</code>和<code>LASSO</code>正则化一样，<code>Dropout</code>不会适用于所有的模型。他的适用取决于具体问题，需要进行测。<br>3.通过限制有些层的权重的最大范数（绝对值）来提高模型的泛化能力。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;深度学习的最终目标是找到最优或者近似最优的模型。当有一个模型被训练出来后，怎么去改进？是否有一个通用的方法？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;土豪法&quot;&gt;&lt;a href=&quot;#土豪法&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="温故知新" scheme="http://www.halfbaker.com/categories/tech/"/>
    
      <category term="AI" scheme="http://www.halfbaker.com/categories/tech/AI/"/>
    
    
      <category term="深度学习" scheme="http://www.halfbaker.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="优化" scheme="http://www.halfbaker.com/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
</feed>
